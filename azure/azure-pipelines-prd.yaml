trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  containerRegistryServiceConnection: $(ACR_SERVICE_CONNECTION)
  imageTag: '$(Build.BuildId)'
  system.debug: true
  CI: false

stages:
- stage: Build
  displayName: 'GIGA Blocks documentation  build'
  jobs:
  - job: Build
    displayName: 'GIGA Blocks documentation build job'

    steps:
    - checkout: self
      fetchTags: true

    - task: DownloadSecureFile@1
      inputs:
        secureFile: '.env.dev.giga-blocks-docs'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '.env.dev.giga-blocks-docs'
        TargetFolder: '$(Build.SourcesDirectory)'

    - script: |
        mv .env.dev.giga-blocks-docs .env
      displayName: 'create .env file'
    - script: |
        sed -i -e 's/demo-url/$(DOMAIN)/g' docusaurus.config.js
      displayName: 'Docusaurus domain update'
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Use Node.js'

    - script: |
        yarn install
        yarn build
      displayName: 'install dependencies and build React app'
    - task: Docker@2
      displayName: Login to container Registry
      inputs:
        command: login
        containerRegistry: $(containerRegistryServiceConnection)

    - task: Docker@2
      displayName: Build and push image to container registry
      inputs:
        command: buildAndPush
        repository: 'prd/giga-blocks-docs'
        dockerfile: './Dockerfile'
        containerRegistry: $(containerRegistryServiceConnection)
        tags: |
          $(imageTag)
- stage: ManualValidation
  displayName: 'GIGA Counts documentation production deployment'
  jobs:
  - job: ManualValidationJob
    pool: 'server'
    steps:
    - task: ManualValidation@0
      inputs:
        notifyUsers: $(APPROVERS)
        instructions: 'Approve the production deployment'
        onTimeout: 'reject'
        timeoutInMinutes: $(TIMEOUT)

  - job: DeployProduction
    displayName: 'GIGA Blocks documentation deployment job'
    dependsOn: ManualValidationJob
    condition: succeeded()
    steps:
    - task: HelmDeploy@0
      displayName: 'Deploy the production Giga Blocks documentation to Kubernetes'
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: $(K8S_SERVICE_CONNECTION)
        command: upgrade
        chartType: FilePath
        chartPath: $(Build.SourcesDirectory)/helm
        releaseName: "giga-blocks-docs"
        valueFile: helm/values.prod.yaml
        namespace: $(K8S_NAMESPACE)
        arguments: >
          --dependency-update
          --set docs.image.tag=$(imageTag)
          --set docs.image.repository=$(IMAGE_REPOSITORY)
